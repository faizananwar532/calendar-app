---
# Source: my-app/templates/frontend-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-app-frontend
  namespace: training
  labels:
    app.kubernetes.io/name: my-app
    app.kubernetes.io/instance: my-app-frontend
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: frontend
    app.kubernetes.io/part-of: my-app
    app.kubernetes.io/managed-by: helm
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: my-app
      component: frontend
  template:
    metadata:
      labels:
        app: my-app
        component: frontend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "80"
        prometheus.io/path: "/metrics"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              topologyKey: kubernetes.io/hostname
              labelSelector:
                matchLabels:
                  app: my-app
                  component: frontend
      containers:
      - name: my-app-frontend
        image: "<ECR REPO>:frontendv2"
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 80
          name: http-frontend
        env:
          - name: REACT_APP_API_BASE_URL
            value: "http://my-app-backend.training.svc.cluster.local:3000/api"
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /
            port: http-frontend
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /
            port: http-frontend
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /
            port: http-frontend
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 24
        securityContext:
          runAsUser: 1000
          runAsGroup: 3000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true

---
# Source: my-app/templates/frontend-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-app-frontend
  namespace: training
  labels:
    app.kubernetes.io/name: my-app
    app.kubernetes.io/instance: my-app-frontend
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: frontend
    app.kubernetes.io/part-of: my-app
    app.kubernetes.io/managed-by: helm
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http-frontend
  selector:
    app: my-app
    component: frontend

---
# Source: my-app/templates/frontend-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-app-frontend
  namespace: training
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    cert-manager.io/acme-challenge-type: dns01
    cert-manager.io/acme-dns01-provider: cloudflare
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - "staging.exampledomain.com"
    secretName: my-app-frontend-tls
  rules:
  - host: "staging.exampledomain.com"
    http:
      paths:
      - path: /
        pathType: ImplementationSpecific
        backend:
          service:
            name: my-app-frontend
            port:
              number: 80
