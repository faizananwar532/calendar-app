---
# Source: my-app/templates/backend-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-app-backend
  namespace: training
  labels:
    app.kubernetes.io/name: my-app
    app.kubernetes.io/instance: my-app-backend
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: backend
    app.kubernetes.io/part-of: my-app
    app.kubernetes.io/managed-by: helm
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: my-app
      component: backend
  template:
    metadata:
      labels:
        app: my-app
        component: backend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              topologyKey: kubernetes.io/hostname
              labelSelector:
                matchLabels:
                  app: my-app
                  component: backend
      initContainers:
        - name: wait-for-mysql
          image: busybox:1.35.0-uclibc
          command: ['sh', '-c', 'until nc -z my-mysql.training.svc.cluster.local 3306; do echo "Waiting for MySQL..."; sleep 5; done;']
      containers:
        - name: my-app-backend
          image: "<ECR REPO>:backend"
          imagePullPolicy: IfNotPresent
          ports:
          - containerPort: 3000
            name: http-backend
          env:
            - name: MYSQL_HOST
              value: my-mysql.training.svc.cluster.local
            - name: MYSQL_USER
              value: root
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-root-password
            - name: MYSQL_DATABASE
              value: calenderDb
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          livenessProbe:
            httpGet:
              path: /health
              port: http-backend
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /ready
              port: http-backend
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          securityContext:
            runAsUser: 1000
            runAsGroup: 3000
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          lifecycle:
            preStop:
              exec:
                command: ["sh", "-c", "sleep 5"]

---
# Source: my-app/templates/backend-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-app-backend
  namespace: training
  labels:
    app.kubernetes.io/name: my-app
    app.kubernetes.io/instance: my-app-backend
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: backend
    app.kubernetes.io/part-of: my-app
    app.kubernetes.io/managed-by: helm
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 3000
    protocol: TCP
    name: http-backend
  selector:
    app: my-app
    component: backend

---
# Source: my-app/templates/backend-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-app-backend
  namespace: training
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    cert-manager.io/acme-challenge-type: dns01
    cert-manager.io/acme-dns01-provider: cloudflare
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - "backend.exampledomain.com"
    secretName: my-app-backend-tls
  rules:
  - host: "backend.exampledomain.com"
    http:
      paths:
      - path: /
        pathType: ImplementationSpecific
        backend:
          service:
            name: my-app-backend
            port:
              number: 80
