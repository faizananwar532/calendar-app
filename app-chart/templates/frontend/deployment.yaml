apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "my-app.frontend.name" . }}
  namespace: {{ .Values.namespace }}
  labels:
    app.kubernetes.io/name: {{ include "my-app.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/version: {{ .Chart.AppVersion | quote }}
    app.kubernetes.io/component: frontend
    app.kubernetes.io/part-of: {{ include "my-app.name" . }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: {{ .Values.frontend.replicaCount | default .Values.global.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "my-app.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
      app.kubernetes.io/component: frontend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "my-app.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/component: frontend
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      # serviceAccountName: {{ include "my-app.serviceAccountName" . }}
      containers:
      - name: {{ include "my-app.frontend.name" . }}
        # Empty security context to allow Nginx initialization
        image: "{{ .Values.frontend.image.repository }}:{{ .Values.frontend.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.frontend.image.pullPolicy }}
        ports:
        - containerPort: {{ .Values.frontend.service.port }}
          name: http
        env:
        {{- if .Values.frontend.env }}
        {{- range $key, $value := .Values.frontend.env }}
        - name: {{ $key }}
          value: {{ $value | quote }}
        {{- end }}
        {{- end }}
        # Custom command to ensure directories are created with proper permissions
        # Only needed if you're encountering permission issues and can't run as root
        {{- if .Values.frontend.command }}
        command:
          {{- toYaml .Values.frontend.command | nindent 10 }}
        {{- end }}
        # Init script to handle permissions
        {{- if .Values.frontend.args }}
        args:
          {{- toYaml .Values.frontend.args | nindent 10 }}
        {{- end }}
        {{- if .Values.frontend.livenessProbe }}
        livenessProbe:
          {{- toYaml .Values.frontend.livenessProbe | nindent 10 }}
        {{- end }}
        {{- if .Values.frontend.readinessProbe }}
        readinessProbe:
          {{- toYaml .Values.frontend.readinessProbe | nindent 10 }}
        {{- end }}
        resources:
        {{- if .Values.frontend.resources }}
          {{- toYaml .Values.frontend.resources | nindent 10 }}
        {{- else }}
          limits:
            cpu: 300m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 128Mi
        {{- end }}
        # Add volume mounts if needed for configuration or persistent data
        {{- if .Values.frontend.volumeMounts }}
        volumeMounts:
          {{- toYaml .Values.frontend.volumeMounts | nindent 10 }}
        {{- end }}
      # Add init containers if needed for setup tasks
      {{- if .Values.frontend.initContainers }}
      initContainers:
        {{- toYaml .Values.frontend.initContainers | nindent 8 }}
      {{- end }}
      # Additional volumes if needed
      {{- if .Values.frontend.volumes }}
      volumes:
        {{- toYaml .Values.frontend.volumes | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}